#!/bin/bash

#
#    (C) Copyright 2017 CEA LIST. All Rights Reserved.
#    Contributor(s): Cingulata team (formerly Armadillo team)
#
#    This software is governed by the CeCILL-C license under French law and
#    abiding by the rules of distribution of free software.  You can  use,
#    modify and/ or redistribute the software under the terms of the CeCILL-C
#    license as circulated by CEA, CNRS and INRIA at the following URL
#    "http://www.cecill.info".
#
#    As a counterpart to the access to the source code and  rights to copy,
#    modify and redistribute granted by the license, users are provided only
#    with a limited warranty  and the software's author,  the holder of the
#    economic rights,  and the successive licensors  have only  limited
#    liability.
#
#    The fact that you are presently reading this means that you have had
#    knowledge of the CeCILL-C license and that you accept its terms.
#


# To search an ASCII  word in a list of y ASCII words (sensitive-case, truncation). All words are represented on x bytes (integer8) (possibly partially with truncature).

# ./search_max_length.sh word
# The values x and y are defined in CMakeLists.txt

# Example with a file containing a list of countries
# ./search_max_length.sh France
# ./search_max_length.sh azerty
# ./search_max_length.sh "Cote D'ivoire"   #work with ASCII characters not only alphabetic ones, if there are spaces, put ""

# Requirements
# list do not contain several times the same item
# list contain list_size elements or more but not less

NB_CHARS=@NB_CHARS@ #we store data on NB_CHARS Integer8
LIST_SIZE=@LIST_SIZE@
REQUEST=$1
LIST_FILE="countries"

echo NB_CHARS=$NB_CHARS REQUEST=$REQUEST LIST_FILE=$LIST_FILE LIST_SIZE=$LIST_SIZE

CIRCUIT=@CIRCUIT@
APPS_DIR=@APPS_DIR@

mkdir -p input
rm -f input/*.ct

mkdir -p output
rm -f output/*.ct

# Precomputation consists in transforming words into x Integer8 using ASCII encoding, zero padding and truncation

#echo "padding: with null character (and trucation if necessary) to get a constant lenght word"
padding()
{
	unpadded_length=${#1}
	padded_length=$2
	nb_missing_char=$((padded_length - unpadded_length))
	prefix=$(printf "$1" |xxd -p)
	suffix=$(printf '%*s' $nb_missing_char | tr ' ' '\0' |xxd -p)
	hexdump="$prefix$suffix"
	echo ${hexdump:0:$((2*$padded_length))} | \grep -o .. | tr '\n' ' ' ; echo
}


words2padding()
{
	padded_length=$1
	while read word; do padding "$word" $padded_length ; done <<< "$first_rows" # <<< to read from a variable rather than a file
}


hex2dec(){ for hex in $1; do echo $((16#$hex)); done }

# Generate keys
echo "FHE key generation"
$APPS_DIR/generate_keys

echo "Input encryption"
NR_THREADS=$(nproc)


decimalRequest=$(echo $(hex2dec "$(padding "$REQUEST" $NB_CHARS)"))

# select first rows of list file
first_rows="$(sed -n 1,"$LIST_SIZE"p < plaintext/$LIST_FILE)"
decimalList=$(echo $(hex2dec "$(echo  $(words2padding $NB_CHARS))"))

$APPS_DIR/encrypt -v `$APPS_DIR/helper --bit-cnt 8    $decimalRequest $decimalList` --threads $NR_THREADS

echo "Homomorphic execution..."
time $APPS_DIR/dyn_omp $CIRCUIT --threads $NR_THREADS # -v

echo "Output decryption"
OUT_FILES=`ls -v output/*`
$APPS_DIR/helper --from-bin --bit-cnt 1 `$APPS_DIR/decrypt --threads $NR_THREADS  $OUT_FILES `

# To see size of output ciphertext
ls -l --human-readable output


echo NB_CHARS=$NB_CHARS REQUEST=$REQUEST LIST_FILE=$LIST_FILE LIST_SIZE=$LIST_SIZE

NB_ENCRYPTED_BITS=$((8*($LIST_SIZE+1)*NB_CHARS))
echo NB_ENCRYPTED_BITS=$NB_ENCRYPTED_BITS
